// Code generated by "stringer -type=Token -linecomment"; DO NOT EDIT.

package token

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ILLEGAL-0]
	_ = x[EOF-1]
	_ = x[IDENT-2]
	_ = x[NUM-3]
	_ = x[STR-4]
	_ = x[TRUE-5]
	_ = x[FALSE-6]
	_ = x[NULL-7]
	_ = x[ASSIGN-8]
	_ = x[PLUS-9]
	_ = x[MINUS-10]
	_ = x[COLON_ASSIGN-11]
	_ = x[PLUS_ASSIGN-12]
	_ = x[MINUS_ASSIGN-13]
	_ = x[ASTERISK_ASSIGN-14]
	_ = x[SLASH_ASSIGN-15]
	_ = x[MOD_ASSIGN-16]
	_ = x[AND_ASSIGN-17]
	_ = x[OR_ASSIGN-18]
	_ = x[POWER_ASSIGN-19]
	_ = x[INC-20]
	_ = x[DEC-21]
	_ = x[AT-22]
	_ = x[ASTERISK-23]
	_ = x[SLASH-24]
	_ = x[MOD-25]
	_ = x[POWER-26]
	_ = x[HASH-27]
	_ = x[REFERENCE-28]
	_ = x[OR-29]
	_ = x[AND-30]
	_ = x[PIPE-31]
	_ = x[CONCAT-32]
	_ = x[LT-33]
	_ = x[GT-34]
	_ = x[SHL-35]
	_ = x[SHR-36]
	_ = x[NOT-37]
	_ = x[QUEST-38]
	_ = x[EQ-39]
	_ = x[NEQ-40]
	_ = x[LE-41]
	_ = x[GE-42]
	_ = x[SGL_QUOTE-43]
	_ = x[DBL_QUOTE-44]
	_ = x[DEFER-45]
	_ = x[DECLARE-46]
	_ = x[WHEN-47]
	_ = x[COMMA-48]
	_ = x[SEMICOLON-49]
	_ = x[COLON-50]
	_ = x[DOT-51]
	_ = x[NS-52]
	_ = x[LPAREN-53]
	_ = x[RPAREN-54]
	_ = x[LBRACE-55]
	_ = x[RBRACE-56]
	_ = x[LBRACKET-57]
	_ = x[RBRACKET-58]
	_ = x[MODLIT-59]
	_ = x[IMPORT-60]
	_ = x[FROM-61]
	_ = x[USE-62]
	_ = x[TYPE-63]
	_ = x[TYPEOF-64]
	_ = x[AS-65]
	_ = x[LET-66]
	_ = x[VAR-67]
	_ = x[CONST-68]
	_ = x[FN-69]
	_ = x[OPERATOR-70]
	_ = x[RETURN-71]
	_ = x[IF-72]
	_ = x[ELSE-73]
	_ = x[MATCH-74]
	_ = x[LOOP-75]
	_ = x[DO-76]
	_ = x[IN-77]
	_ = x[OF-78]
	_ = x[CONTINUE-79]
	_ = x[BREAK-80]
	_ = x[PUB-81]
	_ = x[FINAL-82]
	_ = x[STATIC-83]
	_ = x[COMPTIME-84]
	_ = x[UNSAFE-85]
	_ = x[CLASS-86]
	_ = x[EXTENDS-87]
	_ = x[IMPL-88]
	_ = x[FOR-89]
	_ = x[NEW-90]
	_ = x[DELETE-91]
	_ = x[EXTENSIONS-92]
	_ = x[TRY-93]
	_ = x[CATCH-94]
	_ = x[FINALLY-95]
	_ = x[THROW-96]
	_ = x[THROWS-97]
	_ = x[Opa-98]
	_ = x[Opb-99]
	_ = x[Opc-100]
	_ = x[Opd-101]
	_ = x[Ope-102]
	_ = x[Opf-103]
	_ = x[Opg-104]
	_ = x[Oph-105]
	_ = x[Opi-106]
	_ = x[Opj-107]
	_ = x[Opk-108]
	_ = x[Opl-109]
	_ = x[Opm-110]
	_ = x[Opn-111]
	_ = x[Opo-112]
	_ = x[Opp-113]
	_ = x[Opq-114]
	_ = x[Opr-115]
	_ = x[Ops-116]
	_ = x[Opt-117]
	_ = x[Opu-118]
	_ = x[Opv-119]
	_ = x[Opw-120]
	_ = x[Opz-121]
	_ = x[OpA-122]
	_ = x[OpB-123]
	_ = x[OpC-124]
	_ = x[OpD-125]
	_ = x[OpE-126]
	_ = x[OpF-127]
	_ = x[OpG-128]
	_ = x[OpH-129]
	_ = x[OpI-130]
	_ = x[OpJ-131]
	_ = x[OpK-132]
	_ = x[OpL-133]
	_ = x[OpM-134]
	_ = x[OpN-135]
	_ = x[OpO-136]
	_ = x[OpP-137]
	_ = x[OpQ-138]
	_ = x[OpR-139]
	_ = x[OpS-140]
	_ = x[OpT-141]
	_ = x[OpU-142]
	_ = x[OpV-143]
	_ = x[OpW-144]
	_ = x[OpX-145]
	_ = x[OpY-146]
	_ = x[OpZ-147]
	_ = x[ASYNC-148]
	_ = x[AWAIT-149]
	_ = x[EXTERN-150]
}

const _Token_name = "ILLEGALEOFIDENTNUMSTRtruefalsenull=+-:=+=-=*=/=%=&&=||=**=++--@*/%**#$||&&|&<><<>>!?==!=<=>='\"deferdeclarewhen,;:.::(){}[]modimportfromusetypetypeofasletvarconstfnoperatorreturnifelsematchloopdoinofcontinuebreakpubfinalstaticcomptimeunsafeclassextendsimplfornewdeleteextensionstrycatchfinallythrowthrowsabcdefghijklmnopqrstuvwzABCDEFGHIJKLMNOPQRSTUVWXYZasyncawaitextern"

var _Token_index = [...]uint16{0, 7, 10, 15, 18, 21, 25, 30, 34, 35, 36, 37, 39, 41, 43, 45, 47, 49, 52, 55, 58, 60, 62, 63, 64, 65, 66, 68, 69, 70, 72, 74, 75, 76, 77, 78, 80, 82, 83, 84, 86, 88, 90, 92, 93, 94, 99, 106, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 125, 131, 135, 138, 142, 148, 150, 153, 156, 161, 163, 171, 177, 179, 183, 188, 192, 194, 196, 198, 206, 211, 214, 219, 225, 233, 239, 244, 251, 255, 258, 261, 267, 277, 280, 285, 292, 297, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 358, 363, 369}

func (i Token) String() string {
	if i >= Token(len(_Token_index)-1) {
		return "Token(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Token_name[_Token_index[i]:_Token_index[i+1]]
}
